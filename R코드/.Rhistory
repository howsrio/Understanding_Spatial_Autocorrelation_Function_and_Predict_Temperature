Korea_points = function(){
x=1
a=seq(33,39,by=0.1)
b=seq(124, 132,by=0.1)
grid_korea = matrix(NA,nrow=length(a)*length(b),ncol = 2)
for (i in seq_along(a)){
for (j in seq_along(b)){
grid_korea[x,2]<-a[i]
grid_korea[x,1]<-b[j]
x=x+1
}
}
return(grid_korea)
}
idw_test=function(train_data, test_data){
train.sp = SpatialPointsDataFrame(coords=as.matrix(train_data[,c('Long',"Lat")]),train_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
train.tem = train_data$tem
test.sp = SpatialPointsDataFrame(coords=as.matrix(test_data[,c('Long',"Lat")]),test_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
test.tem = test_data$tem
k_values=seq(2,5, by=0.25)
mse_results <- c()
for (i in seq_along(k_values)){
pred=gstat::idw(train.tem~1, train.sp, test.sp, idp = k_values[i])
comparison = data.frame(Predict = pred$var1.pred, Actual = test.tem)
mse = mean((comparison$Predict - comparison$Actual)^2)# MSE 계산
mse_results[i] <- mse
}
min_mse<- min(mse_results,na.rm = TRUE)
min_mse_index <- which(mse_results== min_mse, arr.ind = TRUE)
best_k = k_values[min_mse_index]
best_mse = mse_results[min_mse_index]
return(c(best_k, best_mse))
}
MLE_test1=function(train_data, test_data){
rem_point=as.matrix(train_data[,c("Long","Lat")])
sam_point=as.matrix(test_data[,c('Long',"Lat")])
train_dev=train_data$tem - mean(train_data$tem)
train.sp=SpatialPointsDataFrame(coords=as.matrix(train_data[,c('Long',"Lat")]),train_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
chordal_matrix <<- theta_dist(rem_point)
#Find Initial value
v <- variogram((train_dev) ~ 1, locations = coordinates(rem_point), train.sp)
psill=var(train_dev)
range= v$dist[length(v$dist)]
nugget= min(v$gamma)
smoothness_parameter= 1/2
model='Mat'
v.fit <- fit.variogram(v, vgm(psill=psill, model=model, range=range, nugget=nugget, nu=smoothness_paramete),
fit.method=1)
parameters=c(v.fit[2,2], v.fit[2,3],v.fit[2,4])
nugget <<- v.fit[1,2]
paras=c(psill, range, smoothness_parameter)
#Deviation matrix
mean <- mean(train_data$tem)
dev_matrix <<- as.matrix(train_data$tem - mean)
optim_MLE=optim(log_paras, NegLogL_optim, method="L-BFGS-B")
MLE=exp(optim_MLE$par)
#Now, we are ready to predict temperature of unknown points
total_point=rbind(rem_point,sam_point)
#Make covariance matrix with expanded coordinates
#(확장된 좌표들의 covaraicne matrix를 만듭니다.)
total_chordal_dist = chordal_dist(total_point)
range=2*sin(MLE[2]/2)*6371
total_CovMat = covariance_func(total_chordal_dist, MLE[1], range, MLE[3], nugget)
#Divide covariance matrix into 4 submatrices
subMat_11=total_CovMat[1:nrow(rem_point),1:nrow(rem_point)]
subMat_12=total_CovMat[1:nrow(rem_point),(nrow(rem_point)+1):nrow(total_point)]
subMat_21=total_CovMat[(nrow(rem_point)+1):nrow(total_point),1:nrow(rem_point)]
subMat_22=total_CovMat[(nrow(rem_point)+1):nrow(total_point),(nrow(rem_point)+1):nrow(total_point)]
#kriging(based on Lecture 03)
inverse_subMat_11=solve(subMat_11)
sam_pred_vec=subMat_21%*%inverse_subMat_11%*%dev_matrix + mean
#After making kriging model, we have to check MSE to check 성능
MSE= mean((sam_pred_vec - test_data$tem)^2)
return(c(MLE[1], range, MLE[3], nugget, MSE))
}
#Calculate negative log likelihood for optim
NegLogL_optim2=function(log_paras){
value= NA
tryCatch({
a=exp(log_paras[1])  #sill
b=exp(log_paras[2])  #spatial range
nu=exp(log_paras[3]) #smoothness parameter
x=chordal_matrix
covariance_matrix = covariance_func(x,a,b,nu,nugget)
det=as.double(determinant(covariance_matrix)$modulus)
inverse_matrix=solve(covariance_matrix)
value=(det+t(dev_matrix)%*%inverse_matrix%*%(dev_matrix))/2
},error=function(e){
})
if (is.na(value)){
cat('there is error in optim with',exp(log_paras),'\n')
value=0
}
return(value)
}
MLE_test2=function(train_data, test_data){
rem_point=as.matrix(train_data[,c("Long","Lat")])
sam_point=as.matrix(test_data[,c('Long',"Lat")])
train_dev=train_data$tem - mean(train_data$tem)
train.sp=SpatialPointsDataFrame(coords=as.matrix(train_data[,c('Long',"Lat")]),train_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
chordal_matrix <<- theta_dist(rem_point)
#Find Initial value
v <- variogram((train_dev) ~ 1, locations = coordinates(rem_point), train.sp)
psill=max(v$gamma)
range= v$dist[length(v$dist)]
nugget <<- min(v$gamma)
smoothness_parameter= 1/2
parameters=c(psill, range, smoothness_parameter)
log_paras=log(abs(parameters)+0.001)
#Deviation matrix
mean <- mean(train_data$tem)
dev_matrix <<- as.matrix(train_data$tem - mean)
NLM=nlm(NegLogL_optim2,log_paras)
MLE=exp(NLM$estimate)
#Now, we are ready to predict temperature of unknown points
total_point=rbind(rem_point,sam_point)
#Make covariance matrix with expanded coordinates
#(확장된 좌표들의 covaraicne matrix를 만듭니다.)
total_chordal_dist = chordal_dist(total_point)
range=2*sin(MLE[2]/2)*6371
total_CovMat = covariance_func(total_chordal_dist, MLE[1], range, MLE[3], nugget)
#Divide covariance matrix into 4 submatrices
subMat_11=total_CovMat[1:nrow(rem_point),1:nrow(rem_point)]
subMat_12=total_CovMat[1:nrow(rem_point),(nrow(rem_point)+1):nrow(total_point)]
subMat_21=total_CovMat[(nrow(rem_point)+1):nrow(total_point),1:nrow(rem_point)]
subMat_22=total_CovMat[(nrow(rem_point)+1):nrow(total_point),(nrow(rem_point)+1):nrow(total_point)]
MSE =NA
tryCatch({
inverse_subMat_11=solve(subMat_11)
sam_pred_vec=subMat_21%*%inverse_subMat_11%*%dev_matrix + mean
#After making kriging model, we have to check MSE to check 성능
MSE= mean((sam_pred_vec - test_data$tem)^2)
},error=function(e){
})
#kriging(based on Lecture 03)
return(c(MLE[1], range, MLE[3], nugget, MSE))
}
vario_test=function(train_data,test_data){
rem_df=train_data
sam_df=test_data
rem_point <- matrix(NA, nrow=nrow(rem_df),ncol=2)
rem_point[,1] <-rem_df$Long
rem_point[,2] <-rem_df$Lat
colnames(rem_point) <- c("Long","Lat")
rem_coords<- as.data.frame(rem_point)
coordinates(rem_coords) <- c("Long", "Lat")
proj4string(rem_coords) <- CRS("+proj=longlat +datum=WGS84")
rem_coords <- spTransform(rem_coords, CRS("+proj=utm +zone=48 +datum=WGS84"))
rem_cprime<-coordinates(rem_coords)
rem_c<-(rem_cprime)/1000
rem_tem = rem_df$tem
sam_point <- matrix(NA, nrow=nrow(sam_df),ncol=2)
sam_point[,1] <-sam_df$Long
sam_point[,2] <-sam_df$Lat
colnames(sam_point) <- c("Long","Lat")
sam_coords<- as.data.frame(sam_point)
coordinates(sam_coords) <- c("Long", "Lat")
proj4string(sam_coords) <- CRS("+proj=longlat +datum=WGS84")
sam_coords <- spTransform(sam_coords, CRS("+proj=utm +zone=48 +datum=WGS84"))
sam_cprime<-coordinates(sam_coords)
sam_c<-(sam_cprime)/1000
sam_tem = sam_df$tem
mean=mean(rem_tem)
max.dist <- max(chordal_dist(rem_point))
bins <- 70 #대략 10km단위의 구간으로 binning
vario.rem <- variog(coords=rem_c, data=(rem_tem-mean), uvec=(seq(0,max.dist,length=bins)))
fit.rem <- variofit(vario.rem, ini.cov.pars=c(6,300), fix.nugget=TRUE, nugget=1.038454, fix.kappa=TRUE,kappa=1.5, cov.model="matern",minimisation.function="nls", weights="equal")
sp.dat2 <- as.geodata(cbind(rem_c,rem_tem))
krigpreds <- krige.conv(sp.dat2, coords=rem_c, data=rem_tem, location=sam_c, krige=krige.control(obj.model=fit.rem, cov.model="matern",cov.pars=c(fit.rem$cov.pars[1], fit.rem$cov.pars[2]),kappa=fit.rem$kappa,nugget=fit.rem$nugget))
sam_predict<-cbind(sam_point,krigpreds$predict)
colnames(sam_predict) <- c("Long", "Lat","Temp")
mse = mean((sam_predict[,'Temp']-sam_tem)^2)
return(c(fit.rem$cov.pars[1], fit.rem$cov.pars[2], fit.rem$nugget, mse))
}
tps_test=function(train_data,test_data){
rem_point=as.matrix(train_data[,c("Long","Lat")])
sam_point=as.matrix(test_data[,c('Long',"Lat")])
rem_dev=train_data$tem - mean(train_data$tem)
sam_dat<-data.frame(sam_point)
rem_dat<-data.frame(rem_point,rem_dev)
m_tprs2 <- gam(rem_dev ~ s(Long, Lat, k = 50, bs = "tp", m =2), data = rem_dat, method = "REML")
predict_sam2 <- predict(m_tprs2, newdata = sam_dat, type = "response") + mean(train_data$tem)
sam_predict<-cbind(sam_point,predict_sam2)
colnames(sam_predict) <- c("Long", "Lat","Temp")
mse=mean((sam_predict[,'Temp']-test_data$tem)^2)
return(mse)
}
mat_test=function(train_data, test_data){
train.sp = SpatialPointsDataFrame(coords=as.matrix(train_data[,c('Long',"Lat")]),train_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
test.sp = SpatialPointsDataFrame(coords=as.matrix(test_data[,c('Long',"Lat")]),test_data,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
train_res=train_data$tem-mean(train_data$tem)
v <- variogram((train_res) ~ 1, locations = as.matrix(train_data[,c("Long","Lat")]), train.sp, width = 0.1)
psill=max(v$gamma)
range= v$dist[length(v$dist)-1]
nugget= min(v$gamma)
min_mse=3
tryCatch({
for(j in seq(0.1 , 1, by= 0.1)){
v.fit <- fit.variogram(v, vgm(psill=psill, model="Mat", range=range, nugget=nugget, kappa = j), fit.method=1)
pred=krige(train_res~1, train.sp, test.sp, model=v.fit)
comparison <- data.frame(Predict = pred$var1.pred+mean(train_data$tem), Actual = test_data$tem)
mse <- mean((comparison$Predict - comparison$Actual)^2)
if(!is.na(mse)){
if(mse < min_mse){
min_mse=mse
psill = v.fit[2,2]
range = v.fit[2,3]
nu = j
nugget=v.fit[1,2]
}
}
}
},error=function(e){
})
tryCatch({
for(j in seq(nu-0.1 , nu+0.1, by= 0.01)){
v.fit <- fit.variogram(v, vgm(psill=psill, model="Mat", range=range, nugget=nugget, kappa = j), fit.method=1)
pred=krige(train_res~1, train.sp, test.sp, model=v.fit)
comparison <- data.frame(Predict = pred$var1.pred+mean(train_data$tem), Actual = test_data$tem)
mse <- mean((comparison$Predict - comparison$Actual)^2)
if(!is.na(mse)){
if(mse < min_mse){
min_mse=mse
psill = v.fit[2,2]
range = v.fit[2,3]
nu = j
nugget=v.fit[1,2]
}
}
}
},error=function(e){
})
return(c(psill, range, nu, nugget, min_mse))
}
mat_test2=function(train_data, test_data){ #km 기준에서 찾는 함수수
train.sp = SpatialPointsDataFrame(coords=as.matrix(train_data[,c('Long',"Lat")]),train_data,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
test.sp = SpatialPointsDataFrame(coords=as.matrix(test_data[,c('Long',"Lat")]),test_data,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
train_res=train_data$tem-mean(train_data$tem)
v <- variogram((train_res) ~ 1, locations = as.matrix(train_data[,c("Long","Lat")]), train.sp , width=10)
psill=max(v$gamma)
range= v$dist[length(v$dist)-1]
nugget= min(v$gamma)
min_mse=3
tryCatch({
for(j in seq(0.1 , 1, by= 0.1)){
v.fit <- fit.variogram(v, vgm(psill=psill, model="Mat", range=range, nugget=nugget, kappa = j), fit.method=1)
pred=krige(train_res~1, train.sp, test.sp, model=v.fit)
comparison <- data.frame(Predict = pred$var1.pred+mean(train_data$tem), Actual = test_data$tem)
mse <- mean((comparison$Predict - comparison$Actual)^2)
if(!is.na(mse)){
if(mse < min_mse){
min_mse=mse
psill = v.fit[2,2]
range = v.fit[2,3]
nu = j
nugget=v.fit[1,2]
}
}
}
},error=function(e){
})
tryCatch({
for(j in seq(nu-0.1 , nu+0.1, by= 0.05)){
v.fit <- fit.variogram(v, vgm(psill=psill, model="Mat", range=range, nugget=nugget, kappa = j), fit.method=1)
pred=krige(train_res~1, train.sp, test.sp, model=v.fit)
comparison <- data.frame(Predict = pred$var1.pred+mean(train_data$tem), Actual = test_data$tem)
mse <- mean((comparison$Predict - comparison$Actual)^2)
if(!is.na(mse)){
if(mse < min_mse){
min_mse=mse
psill = v.fit[2,2]
range = v.fit[2,3]
nu = j
nugget=v.fit[1,2]
}
}
}
},error=function(e){
})
return(c(psill, range, nu, nugget, min_mse))
}
Mat_MSE_result2=matrix(NA, nrow=10, ncol=5)
colnames(Mat_MSE_result2) <- c("sill","range","nu","nugget",'MSE')
# K-fold 교차 검증 수행 및 모델 학습 및 평가
for (i in 1:10) { # k 값에 따라 범위 조정
train_data <- data[-folds[[i]], ]    # 현재 폴드를 제외한 나머지 데이터를 학습 데이터로 사용
test_data <- data[folds[[i]], ]      # 현재 폴드를 검증 데이터로 사용
Mat_MSE_result2[i,]=mat_test2(train_data,test_data)
}
#결과 추출출
Mat_MSE_result2
v <- variogram((data$tem-mean(data$tem)) ~ 1, locations = coordinates(point), point.sp, width=10)
index=8
sill = Mat_MSE_result2[index,1]
nugget=Mat_MSE_result2[index,4]
range=Mat_MSE_result2[index,2]
kappa=Mat_MSE_result2[index,3]
v.fit <- fit.variogram(v, vgm(psill=sill, model="Mat", range=range, kappa=Mat_MSE_result2[index,3], nugget=nugget), fit.method=1)
plot(v, v.fit, main=paste(sub,' Variogram Fitting',sep=''), pch = 16, cex=.5, xlab ='distance(km)',
par.settings = list(
layout.heights = list(top.padding = 5,bottom.padding=2, main.key.padding = 1),
layout.widths = list(left.padding = 2, right.padding = 2)))
krige_df <- krige(((data$tem-mean(data$tem)))~1, point.sp, grd.sp, model=v.fit)
Mat_pred_matrix=cbind(grd, krige_df$var1.pred+mean(data$tem))
Mat_pred_matrix[1,]
#결과 추출출
Mat_MSE_result2
v <- variogram((data$tem-mean(data$tem)) ~ 1, locations = coordinates(point), point.sp, width=10)
index=2
sill = Mat_MSE_result2[index,1]
nugget=Mat_MSE_result2[index,4]
range=Mat_MSE_result2[index,2]
kappa=Mat_MSE_result2[index,3]
v.fit <- fit.variogram(v, vgm(psill=sill, model="Mat", range=range, kappa=Mat_MSE_result2[index,3], nugget=nugget), fit.method=1)
plot(v, v.fit, main=paste(sub,' Variogram Fitting',sep=''), pch = 16, cex=.5, xlab ='distance(km)',
par.settings = list(
layout.heights = list(top.padding = 5,bottom.padding=2, main.key.padding = 1),
layout.widths = list(left.padding = 2, right.padding = 2)))
krige_df <- krige(((data$tem-mean(data$tem)))~1, point.sp, grd.sp, model=v.fit)
Mat_pred_matrix=cbind(grd, krige_df$var1.pred+mean(data$tem))
Mat_pred_matrix[1,]
sub = "2022 Fall"  #주제
df = read_excel("C:/Users/82109/OneDrive/공간통계 학술제/데이터/Processed Data/Processed Data/Temps_by_Obs_2022_Fall.xlsx") #자료
tem = df$Summer #df$변수명
df = read_excel("C:/Users/82109/OneDrive/공간통계 학술제/데이터/Processed Data/Processed Data/Temps_by_Obs_2022_Fall.xlsx") #자료
tem = df$Fall #df$변수명
col = data_to_col(min(tem),max(tem)) #함수 페이지 실행
#데이터프레임 df에서 무작위로 10%의 데이터를 추출하여 sam_df에 저장.
set.seed(1111)
sam_df <- df %>% sample_frac(0.1)
#위에서 무작위로 추출한 데이터를 제외한 나머지 데이터를 rem_df에 저장.
rem_df <- df %>% anti_join(sam_df)
#rem_df에 대한 작업
#rem_df의 위도와 경도 값을 rem_point matrix에 저장.
rem_point <- matrix(NA, nrow=nrow(rem_df),ncol=2)
rem_point[,1] <-rem_df$Long
rem_point[,2] <-rem_df$Lat
colnames(rem_point) <- c("Long","Lat")
#projection 방법에 따라 SPDF를 두 가지로 저장
#∎Question∎ : 근데 우리가 이제 covariance matrix도 있고, variogram을 직접 만들어 볼 수는 없을까?
#              직접 만들 수 있으면 이런 과정도 필요 없을수도 있지 않나?
#              아 그래도 kriging map을 그리려면 필요한가?
rem.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
remV.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
#rem_df의 한 계절의 온도 값을 rem_tem에 저장
rem_tem = rem_df$Fall
#sam_df에도 마찬가지 작업
sam_point <- matrix(NA, nrow=nrow(sam_df),ncol=2)
sam_point[,1] <-sam_df$Long
sam_point[,2] <-sam_df$Lat
colnames(sam_point) <- c("Long","Lat")
sam.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
samV.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
sam_tem = sam_df$Fall
#∎Question∎ :'추후 Kriging map을 위한 그리드 생성'이 목적 맞음?
grd <- Sobj_SpatialGrid(remV.sp, maxDim=400)$SG
#------------------------------------------------------------------------------------------------
#우리는 평균과의 차이를 이용해서 variogram fitting 할 예정
#(20230902 수정) 잔차(residual)은 예측값과 실제값의 차이를 의미.
#                따라서 평균과의 차이인 편차(deviation)을 이용하여 변수명 변경
#                rem_res >>> rem_dev
rem_dev=rem_tem - mean(rem_tem)
v <- variogram((rem_dev) ~ 1, locations = coordinates(rem_point), remV.sp, width = 10)
##Fit Variogram With Exp Model
psill=var(rem_dev)
range= v$dist[length(v$dist)-1]
nugget= min(v$gamma)
model='Exp'
#variogram 학습 0.5까지( 약5%의 데이터는 제외하고 학습)
v.fit <- fit.variogram(v, vgm(psill=psill, model=model, range=range, nugget=nugget),
fit.method=1)
cat(' sill = ',psill,'\n','range = ',range,'\n','nugget = ',1)
cat(' sill = ',v.fit[2,2],'\n','range = ',v.fit[2,3],'\n','nugget = ',v.fit[1,2])
plot(v, v.fit,main=paste(sub,' Fit Variogram by Exp Model',sep=''), pch = 16, cex=.5,
sub=paste("Model =",model,", Sill =",round(v.fit[2,2], 4),', Range =',round(v.fit[2,3], 4),', Nugget =',round(v.fit[1,2],4)),
par.settings = list(
layout.heights = list(top.padding = 5,bottom.padding=2, main.key.padding = 1),
layout.widths = list(left.padding = 2, right.padding = 2)))
#-------------------------------------------------------------------------------------------------
#MSE
pred=krige(rem_dev~1, remV.sp, samV.sp, model=v.fit)
comparison <- data.frame(sam_df,Predict = mean(rem_tem)+pred$var1.pred)
mse <- mean((comparison$Predict - comparison$Fall)^2)
cat(sub,'MSE:',mse)
kr <- krige(rem_dev~1, remV.sp, grd, model=v.fit)
sub = "2022 Fall"  #주제
df=read_excel("C:/Users/82109/OneDrive/공간통계 학술제/데이터/Processed Data/Processed Data/Temps_by_Obs_2022_Fall.xlsx") #자료
tem = df$Summer #df$변수명
Summer
tem = df$Fall #df$변수명
col = data_to_col(min(tem),max(tem)) #함수 페이지 실행
set.seed(1111)
# 데이터프레임 df를 무작위로 10%로 분리합니다.
sam_df <- df %>% sample_frac(0.1)
# 10% 무작위 표본을 제외한 나머지 행들을 따로 저장합니다.
rem_df <- df %>% anti_join(sam_df)
#지도 생성성
data(wrld_simpl)
rem_point <- matrix(NA, nrow=nrow(rem_df),ncol=2)
rem_point[,1] <-rem_df$Long
rem_point[,2] <-rem_df$Lat
colnames(rem_point) <- c("Long","Lat")
rem.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
remV.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
rem_tem = rem_df$Fall
sam_point <- matrix(NA, nrow=nrow(sam_df),ncol=2)
sam_point[,1] <-sam_df$Long
sam_point[,2] <-sam_df$Lat
colnames(sam_point) <- c("Long","Lat")
sam.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
samV.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
sam_tem = sam_df$Fall
grd <- Sobj_SpatialGrid(remV.sp, maxDim=400)$SG
v <- variogram((rem_tem) ~ 1, locations = coordinates(rem_point), remV.sp)
##Fit Variogram With Exp Model
psill= max(v$gamma)
range= v$dist[length(v$dist)-1]
nurget= min(v$gamma)
model='Exp'
#variogram 학습 0.5까지( 약5%의 데이터는 제외하고 학습)
v.fit <- fit.variogram(v[3:ncol(v),], vgm(psill=psill, model=model, range=range, nurget=nurget))
plot(v, v.fit,main=paste(sub,' Fit Variogram by Exp Model',sep=''), pch = 16, cex=.5,
sub=paste("Model =",model,", Sill =",round(psill, 4),', Range =',round(range, 4),', Nurget =',round(nurget, 4)),
par.settings = list(
layout.heights = list(top.padding = 5,bottom.padding=2, main.key.padding = 1),
layout.widths = list(left.padding = 2, right.padding = 2)))
#MSE
pred=krige(rem_tem~1, remV.sp, samV.sp, model=v.fit)
comparison <- data.frame(Predict = pred$var1.pred, Actual = sam_tem)
mse <- mean((comparison$Predict - comparison$Actual)^2)
cat(sub,'MSE:',mse)
kr <- krige(rem_tem~1, remV.sp, grd, model=v.fit)
spplot(kr[1], col.regions=col, main=paste(sub," Kriging Interpolation",sep=''),
sub=paste("Model = ",model,", Sill = ",round(psill, 4),', Range = ',round(range, 4),', Nurget = ',round(nurget, 4),
'\n','MSE : ',round(mse, 4),sep=''),
scales = list(draw = TRUE),
par.settings = list(
layout.heights = list(top.padding = 2,bottom.padding=2, main.key.padding = 1),
layout.widths = list(left.padding = 2, right.padding = 2)
))
##_Sample_Directional_Search
plot(variogram(tem~1, locations=coordinates(sp_point), data=data.sp, alpha=c(0,45,90,135),cloud=F),
pch=16,main=paste(sub,'_Sample_Directional_Search',sep=''))
##_Sample_Directional_Search
plot(variogram(tem~1, locations=coordinates(sp_point), data=data.sp, alpha=c(0,45,90,135),cloud=F),
pch=16,main=paste(sub,'_Sample_Directional_Search',sep=''))
sub="2022 Fall"  #주제
tem
sp_point <- matrix(NA, nrow=nrow(df),ncol=2)
sp_point[,1] <-df$경도
sp_point[,2] <-df$위도
sp_point
#Subject
sub = "2022 Summer"
df = read_excel("C:/Users/82109/OneDrive/공간통계 학술제/데이터/Processed Data/Processed Data/Temps_by_Obs_2022_Summer.xlsx") #자료
col = data_to_col(min(tem),max(tem)) #함수 페이지 실행
#데이터프레임 df에서 무작위로 10%의 데이터를 추출하여 sam_df에 저장.
set.seed(1111)
sam_df <- df %>% sample_frac(0.1)
#위에서 무작위로 추출한 데이터를 제외한 나머지 데이터를 rem_df에 저장.
rem_df <- df %>% anti_join(sam_df)
#rem_df에 대한 작업
#rem_df의 위도와 경도 값을 rem_point matrix에 저장.
rem_point <- matrix(NA, nrow=nrow(rem_df),ncol=2)
rem_point[,1] <-rem_df$Long
rem_point[,2] <-rem_df$Lat
colnames(rem_point) <- c("Long","Lat")
#projection 방법에 따라 SPDF를 두 가지로 저장
#이 SPDF들은 idw interpolation에 활용
rem.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
remV.sp <- SpatialPointsDataFrame(coords=rem_point,rem_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
#rem_df의 한 계절의 온도 값을 rem_tem에 저장
rem_tem = rem_df$Summer
#sam_df에도 마찬가지 작업
sam_point <- matrix(NA, nrow=nrow(sam_df),ncol=2)
sam_point[,1] <-sam_df$Long
sam_point[,2] <-sam_df$Lat
colnames(sam_point) <- c("Long","Lat")
sam.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=utm +zone=48 +datum=WGS84"))
samV.sp <- SpatialPointsDataFrame(coords=sam_point,sam_df,
proj4string=CRS("+proj=longlat +zone=48 +datum=WGS84"))
sam_tem = sam_df$Summer
##_Sample_Directional_Search
plot(variogram(tem~1, locations=coordinates(rem_point), data=rem.sp, alpha=c(0,45,90,135),cloud=F),
pch=16,main=paste(sub,'_Sample_Directional_Search',sep=''))
##_Sample_Directional_Search
plot(variogram(rem_tem~1, locations=coordinates(rem_point), data=rem.sp, alpha=c(0,45,90,135),cloud=F),
pch=16,main=paste(sub,'_Sample_Directional_Search',sep=''))
#Subject
sub = "2022 Fall"
##_Sample_Directional_Search
plot(variogram(rem_tem~1, locations=coordinates(rem_point), data=rem.sp, alpha=c(0,45,90,135),cloud=F),
pch=16,main=paste(sub,'_Sample_Directional_Search',sep=''))
